{"version":3,"sources":["component/RecipeDetails.js","component/Recipe.js","component/Alert.js","App.js","serviceWorker.js","index.js"],"names":["RecipeDetails","ingredients","map","ing","index","key","className","text","weight","Recipe","props","recipe","label","image","url","useState","toggle","setToggle","setText","src","alt","href","target","rel","onClick","Alert","alert","App","query","setquery","recipes","setRecipes","loading","setLoading","setAlert","getData","a","axios","get","result","data","more","hits","title","onSubmit","e","preventDefault","type","placeholder","autoComplete","onChange","name","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAWeA,EATO,SAAC,GACnB,OADqC,EAAjBC,YACDC,KAAI,SAACC,EAAKC,GAAN,OACnB,wBAAIC,IAAKD,EAAOE,UAAU,mBACtB,wBAAIA,UAAU,mBAAmBH,EAAII,MACrC,wBAAID,UAAU,qBAAd,YAA4CH,EAAIK,aCmB7CC,EAtBA,SAACC,GAAW,IAAD,EACmBA,EAAMC,OAAOA,OAAhDC,EADgB,EAChBA,MAAOC,EADS,EACTA,MAAOC,EADE,EACFA,IAAKb,EADH,EACGA,YADH,EAEIc,oBAAS,GAFb,mBAEjBC,EAFiB,KAETC,EAFS,OAGAF,mBAAS,QAHT,mBAGjBR,EAHiB,KAGXW,EAHW,KASxB,OACE,yBAAKZ,UAAU,UACb,4BAAKM,GACL,yBAAKO,IAAKN,EAAOO,IAAKR,IACtB,uBAAGS,KAAMP,EAAKQ,OAAO,SAASC,IAAI,uBAAlC,QAGA,4BAAQC,QAXU,WACpBP,GAAWD,GACXE,EAAiB,SAATX,EAAkB,OAAS,UASjC,IAAkCA,EAAlC,gBACCS,EAAS,kBAAC,EAAD,CAAef,YAAaA,IAAkB,OCV/CwB,EARD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACZ,OACI,yBAAKpB,UAAU,SACX,4BAAKoB,K,kCCyEFC,MArEf,WAAgB,IAAD,EACaZ,mBAAS,IADtB,mBACNa,EADM,KACCC,EADD,OAEiBd,mBAAS,IAF1B,mBAENe,EAFM,KAEGC,EAFH,OAGiBhB,oBAAS,GAH1B,mBAGNiB,EAHM,KAGGC,EAHH,OAIalB,mBAAS,IAJtB,mBAINW,EAJM,KAICQ,EAJD,KAQPpB,EAAG,0CAAsCc,EAAtC,mBAFM,WAEN,oBADO,oCAGVO,EAAO,uCAAG,4BAAAC,EAAA,yDACA,KAAVR,EADU,gCAESS,IAAMC,IAAIxB,GAFnB,QAENyB,EAFM,QAIDC,KAAKC,MACdV,EAAWQ,EAAOC,KAAKE,MACvBb,EAAS,IACTI,GAAW,KAGXC,EAAS,0BACTD,GAAW,IAXD,sBAcZC,EAAS,wBACTD,GAAW,GAfC,2CAAH,qDA+Bb,OACE,yBAAK3B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQqC,MAAM,qBAEhB,6BACA,0BAAMrC,UAAU,cAAcsC,SAdjB,SAACC,GAChBA,EAAEC,iBACFZ,EAAS,IACTH,EAAW,IACXI,IACQF,IAARL,KAUKF,EAAQ,kBAAC,EAAD,CAAOA,MAAOA,IAAY,KACnC,2BACEqB,KAAK,OACLC,YAAY,0BACZC,aAAa,MACbC,SAxBS,SAACL,GAChB,IAAMM,EAAON,EAAEvB,OAAO8B,MACtBvB,EAASsB,IAuBHC,MAAOxB,IAET,2BAAOmB,KAAK,SAASK,MAAM,YAE7B,yBAAK9C,UAAU,WACZ0B,EACC,4CACEF,EACFA,EAAQ5B,KAAI,SAACS,EAAQP,GAAT,OAAmB,kBAAC,EAAD,CAAQC,IAAKD,EAAOO,OAAQA,OACzD,QC5DQ0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3446f0a2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst RecipeDetails = ({ingredients}) => {\r\n    return ingredients.map((ing, index) => (\r\n        <ul key={index} className=\"ingredient-list\">\r\n            <li className=\"ingredient-text\">{ing.text}</li>\r\n            <li className=\"ingredient-weight\">Weight - {ing.weight}</li>\r\n        </ul>\r\n    ))\r\n}\r\n\r\nexport default RecipeDetails\r\n","import React, { useState } from \"react\";\r\nimport RecipeDetails from \"./RecipeDetails\";\r\n\r\nconst Recipe = (props) => {\r\n  const { label, image, url, ingredients } = props.recipe.recipe;\r\n  const [toggle, setToggle] = useState(false);\r\n  const [text, setText] = useState(\"Show\");\r\n\r\n  const toggleHandler = () => {\r\n    setToggle(!toggle)\r\n    setText(text === \"Show\" ? \"Hide\" : \"Show\")\r\n  }\r\n  return (\r\n    <div className=\"recipe\">\r\n      <h2>{label}</h2>\r\n      <img src={image} alt={label} />\r\n      <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        More\r\n      </a>\r\n      <button onClick={toggleHandler}> {text} Ingredients</button>\r\n      {toggle ? <RecipeDetails ingredients={ingredients} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React from 'react'\r\n\r\nconst Alert = ({alert}) => {\r\n    return (\r\n        <div className=\"alert\">\r\n            <h3>{alert}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Recipe from \"./component/Recipe\";\nimport Alert from \"./component/Alert\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\n\nfunction App() {\n  const [query, setquery] = useState(\"\");\n  const [recipes, setRecipes] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [alert, setAlert] = useState(\"\");\n\n  const APP_ID = \"f59f8e08\";\n  const APP_KEY = \"ed0cd0d0732d820e08ca116533699764\";\n  const url = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  const getData = async () => {\n    if (query !== \"\") {\n      const result = await axios.get(url);\n      //console.log(result)\n      if (result.data.more) {\n        setRecipes(result.data.hits);\n        setquery(\"\");\n        setLoading(false);\n        //console.log(recipes);\n      } else {\n        setAlert(\"NO food with such name\");\n        setLoading(false);\n      }\n    } else {\n      setAlert(\"Please Fill the Form\");\n      setLoading(false);\n    }\n  };\n\n  const onChange = (e) => {\n    const name = e.target.value;\n    setquery(name);\n  };\n  const onSubmit = (e) => {\n    e.preventDefault();\n    setAlert(\"\");\n    setRecipes([])\n    getData();\n    query ? setLoading(true) : setLoading(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <MuiThemeProvider>\n        <AppBar title=\"Food Recipe App\" />\n      </MuiThemeProvider>\n      <h1></h1>\n      <form className=\"search-form\" onSubmit={onSubmit}>\n        {alert ? <Alert alert={alert} /> : null}\n        <input\n          type=\"text\"\n          placeholder=\"Search food (Eg: pizza)\"\n          autoComplete=\"off\"\n          onChange={onChange}\n          value={query}\n        />\n        <input type=\"submit\" value=\"Search\" />\n      </form>\n      <div className=\"recipes\">\n        {loading ? (\n          <h2>Loading.....</h2>\n        ) : recipes ? (\n          recipes.map((recipe, index) => <Recipe key={index} recipe={recipe} />)\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}